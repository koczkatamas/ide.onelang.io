extension: java
casing:
  class: pascal_case
  enum: pascal_case
  enumMember: upper_case
  method: camel_case
  field: camel_case
  property: camel_case
  variable: camel_case
primitiveTypes:
  any: Object
  void: void
classes:
  OneCharacter:
    type: char
  OneString:
    type: String
    fields:
      length:
        template: "{{self}}.length()"
    methods:
      substring:
        template: "{{self}}.substring({{start}}, {{end}})"
      split:
        includes: [java.util.Arrays]
        template: "Arrays.asList({{self}}.split({{separator}}))"
      get:
        template: "{{self}}.charAt({{idx}})"
      replace:
        template: "{{self}}.replace({{from}}, {{to}})"
      substrMatch:
        template: "{{self}}.startsWith({{str}}, {{offset}})"
  OneNumber:
    type: Integer
  OneBoolean:
    type: boolean
  OneConsole:
    methods:
      print:
        template: "System.out.println({{str}})"
  OneArray:
    includes: [java.util.List, java.util.Arrays, java.util.ArrayList] # TODO: java.util.Arrays only if array literal used
    type: "List<{{typeArgs[0]}}>"
    fields:
      length:
        template: "{{self}}.size()"
    methods:
      add:
        template: "{{self}}.add({{item}})"
      get:
        template: "{{self}}.get({{index}})"
      set:
        template: "{{self}}.set({{index}}], {{value}})"
  OneMap:
    includes: [java.util.HashMap]
    type: "HashMap<{{typeArgs[0]}}, {{typeArgs[1]}}>"
    methods:
      keys:
        includes: [java.util.ArrayList]
        template: "new ArrayList({{self}}.keySet())"
      values:
        includes: [java.util.ArrayList]
        template: "new ArrayList({{self}}.values())"
      remove:
        template: "{{self}}.remove({{key}})"
      hasKey:
        template: "{{self}}.containsKey({{key}})"
      get:
        template: "{{self}}.get({{key}})"
      set:
        template: "{{self}}.put({{key}}, {{value}})"
  OneFile:
    methods:
      readText:
        includes: [java.nio.file.Paths, java.nio.file.Files] # java.io.IOException
        exceptions: [IOException]
        template: "new String(Files.readAllBytes(Paths.get({{fn}})));"
  OneError:
    methods:
      raise:
        template: throw new Exception({{message}})
  OneBigInteger:
    type: "BigInteger"
    includes: [java.math.BigInteger]
    methods:
      fromInt:
        template: "BigInteger.valueOf({{value}})"
  OneJson:
    methods:
      parse:
        includes: [com.google.gson.*]
        template: "new JsonParser().parse({{str}})"
  OneJValue:
    type: JsonElement
    includes: [com.google.gson.*]
    methods:
      isObject: "{{self}}.isJsonObject()"
      isArray: "{{self}}.isJsonArray()"
      isString: "({{self}}.isJsonPrimitive() && ((JsonPrimitive){{self}}).isString())"
      isNumber: "({{self}}.isJsonPrimitive() && ((JsonPrimitive){{self}}).isNumber())"
      isBool: "({{self}}.isJsonPrimitive() && ((JsonPrimitive){{self}}).isBoolean())"
      isNull: "{{self}}.isJsonNull()"
      asString: "{{self}}.getAsString()"
      asNumber: "{{self}}.getAsInt()"
      asBool: "{{self}}.getAsBoolean()"
      asObject: "{{self}}.getAsJsonObject()"
      getArrayItems: "{{self}}.getAsJsonArray()"
  OneJObject:
    type: JsonObject
    includes: [com.google.gson.*]
    methods:
      getProperties: "new ArrayList({{self}}.entrySet())"
      get: "{{self}}.get({{name}})"
  OneJProperty:
    type: Map.Entry<String,JsonElement>
    includes: [java.util.Map]
    methods:
      getName: "{{self}}.getKey()"
      getValue: "{{self}}.getValue()"
  One:
    methods:
      langName: '"Java"'
operators:
  OneString == OneString: "{{gen(left)}}.equals({{gen(right)}})"
  OneString != OneString: "!{{gen(left)}}.equals({{gen(right)}})"

  OneBigInteger + OneBigInteger:  "{{gen(left)}}.add({{gen(right)}})"
  OneBigInteger - OneBigInteger:  "{{gen(left)}}.subtract({{gen(right)}})"
  OneBigInteger * OneBigInteger:  "{{gen(left)}}.multiply({{gen(right)}})"
  OneBigInteger / OneBigInteger:  "{{gen(left)}}.divide({{gen(right)}})"
  OneBigInteger % OneBigInteger:  "{{gen(left)}}.mod({{gen(right)}})"
  OneBigInteger << OneBigInteger: "{{gen(left)}}.shiftLeft(({{gen(right)}}).intValue())"
  OneBigInteger >> OneBigInteger: "{{gen(left)}}.shiftRight(({{gen(right)}}).intValue())"
  OneBigInteger > OneBigInteger:  "{{gen(left)}}.compareTo({{gen(right)}}) > 0"
  OneBigInteger < OneBigInteger:  "{{gen(left)}}.compareTo({{gen(right)}}) < 0"
  OneBigInteger >= OneBigInteger: "{{gen(left)}}.compareTo({{gen(right)}}) >= 0"
  OneBigInteger <= OneBigInteger: "{{gen(left)}}.compareTo({{gen(right)}}) <= 0"
  OneBigInteger == OneBigInteger: "{{gen(left)}}.compareTo({{gen(right)}}) == 0"
  OneBigInteger != OneBigInteger: "{{gen(left)}}.compareTo({{gen(right)}}) != 0"
  OneBigInteger & OneBigInteger:  "{{gen(left)}}.and({{gen(right)}})"
  OneBigInteger | OneBigInteger:  "{{gen(left)}}.or({{gen(right)}})"
  OneBigInteger ^ OneBigInteger:  "{{gen(left)}}.xor({{gen(right)}})"

  OneBigInteger + OneNumber:  "{{gen(left)}}.add(BigInteger.valueOf({{gen(right)}}))"
  OneBigInteger - OneNumber:  "{{gen(left)}}.subtract(BigInteger.valueOf({{gen(right)}}))"
  OneBigInteger * OneNumber:  "{{gen(left)}}.multiply(BigInteger.valueOf({{gen(right)}}))"
  OneBigInteger / OneNumber:  "{{gen(left)}}.divide(BigInteger.valueOf({{gen(right)}}))"
  OneBigInteger % OneNumber:  "{{gen(left)}}.mod(BigInteger.valueOf({{gen(right)}}))"
  OneBigInteger << OneNumber: "{{gen(left)}}.shiftLeft({{gen(right)}})"
  OneBigInteger >> OneNumber: "{{gen(left)}}.shiftRight({{gen(right)}})"
  OneBigInteger > OneNumber:  "{{gen(left)}}.compareTo(BigInteger.valueOf({{gen(right)}})) > 0"
  OneBigInteger < OneNumber:  "{{gen(left)}}.compareTo(BigInteger.valueOf({{gen(right)}})) < 0"
  OneBigInteger >= OneNumber: "{{gen(left)}}.compareTo(BigInteger.valueOf({{gen(right)}})) >= 0"
  OneBigInteger <= OneNumber: "{{gen(left)}}.compareTo(BigInteger.valueOf({{gen(right)}})) <= 0"
  OneBigInteger == OneNumber: "{{gen(left)}}.compareTo(BigInteger.valueOf({{gen(right)}})) == 0"
  OneBigInteger != OneNumber: "{{gen(left)}}.compareTo(BigInteger.valueOf({{gen(right)}})) != 0"
  OneBigInteger & OneNumber:  "{{gen(left)}}.and(BigInteger.valueOf({{gen(right)}}))"
  OneBigInteger | OneNumber:  "{{gen(left)}}.or(BigInteger.valueOf({{gen(right)}}))"
  OneBigInteger ^ OneNumber:  "{{gen(left)}}.xor(BigInteger.valueOf({{gen(right)}}))"
templates:
  testGenerator: |-
    class Program {
        public static void main(String[] args) throws Exception {
            try {
                new {{class}}().{{method}}();
            } catch (Exception err) {
                System.out.println("Exception: " + err.getMessage());
            }
        }
    }

  main: |-
    {{for inc in includes|sep=\n}}
      import {{inc.name}};
    {{/for}}

    {{for enum in enums|sep=\n}}
      enum {{enum.name}} { 
      {{for item in enum.values|inline sep=", "}}
        {{item.name}}
      {{/for}}
       };
    {{/for}}

    {{for interface in interfaces|sep=\n\n}}
      interface {{genTypeArgs(interface, "extends")}} {
        {{for method in interface.methods|sep="\n    \n"}}
          {{method.returnType}} {{method.name}}({{genArgs(method)}}) throws Exception;
        {{/for}}
      }
    {{/for}}    

    {{for class in classes|sep=\n\n}}
      class {{genTypeArgs(class, "implements")}} {
          {{if class.attributes["reflect"]}}
            static {
                OneReflect.publish({{class.name}}.class);
            }
          {{/if}}

          {{for field in class.fields|sep=\n}}
            {{field.visibility}} {{if field.static}}static {{/if}}{{field.type}} {{field.name}}{{if field.initializer}} = {{gen(field.initializer)}}{{/if}};
          {{/for}}

          {{if class.constructor}}
            public {{class.name}}({{genArgs(class.constructor)}}) throws Exception {
                {{genBody(class.constructor.body)}}
            }
          {{/if}}

          {{for method in class.methods|sep="\n    \n"}}
            {{method.visibility}} {{if method.static}}static {{/if}}{{method.returnType}} {{method.name}}({{genArgs(method)}}) throws Exception
            {
                {{genBody(method.body)}}
            }
          {{/for}}
      }
    {{/for}}

    {{if mainBlock.statements.length > 0}}
      class Program {
          public static void main(String[] args) throws Exception {
              {{genBody(mainBlock)}}
          }
      }
    {{/if}}    

  genTypeArgs:
    args: [{name: class}, {name: inheritText}]
    template: |-
      {{class.name}}
      {{if class.typeArguments|inline}}
        <
        {{for arg in class.typeArguments|inline sep=", "}}
          {{arg}}
        {{/for}}
        >
      {{/if}}
      {{if class.baseClass|inline}}
         extends {{class.baseClass}}
      {{/if}}
      {{for name in class.baseInterfaces|inline}}
         {{inheritText}} {{name}}
      {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.type}} {{param.name}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "{{typeName(itemVar.type)}} {{itemVar.outName}} = {{gen(itemVar.initializer)}}"
  genWithParen:
    args: [{ name: expr }]
    template: |-
      {{if expr.exprKind == "Binary" or expr.exprKind == "Conditional"}}
        ({{gen(expr)}})
      {{else}}
        {{gen(expr)}}
      {{/if}}
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}.{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: '"{{expr.escapedText}}"'
  characterLiteral: "'{{expr.escapedTextSingle}}'"
  nullLiteral: "null"
  return: "return{{if expr.expression}} {{gen(expr.expression)}}{{/if}};"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  throw: "throw {{gen(expr.expression)}};"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  variableDeclaration: "{{genVar(expr)}};"
  new: "new {{gen(expr.cls)}}({{genParams(expr.arguments)}})"
  classReference: "{{expr.classRef.outName}}"
  enumReference: "{{expr.enumRef.outName}}"
  enumMemberReference: "{{expr.enumRef.outName}}.{{expr.enumMemberRef.outName}}"
  arrayLiteral:
    includes: [java.util.ArrayList, java.util.Arrays]
    template: "new ArrayList<{{expr.typeArgs[0]}}>(Arrays.asList({{genParams(expr.items)}}))"
  mapLiteralDeclaration: |- 
    HashMap<{{typeName(expr.initializer.valueType.typeArguments[0])}}, {{typeName(expr.initializer.valueType.typeArguments[1])}}> {{expr.name}} = new HashMap<{{typeName(expr.initializer.valueType.typeArguments[0])}}, {{typeName(expr.initializer.valueType.typeArguments[1])}}>();
    {{for prop in expr.initializer.properties|sep="\n"}}
      {{expr.name}}.put("{{prop.name}}", {{gen(prop.initializer)}});
    {{/for}}
  expressionStatement: "{{gen(expr.expression)}};"
  instanceMethod: "{{gen(expr.thisExpr)}}.{{expr.methodRef.outName}}"
  staticMethod: "{{expr.methodRef.classRef.outName}}.{{expr.methodRef.outName}}"
  localVar: "{{expr.varRef.outName}}"
  methodArgument: "{{expr.varRef.outName}}"
  instanceField: "{{gen(expr.thisExpr)}}.{{expr.varRef.outName}}"
  staticField: "{{gen(expr.thisExpr)}}.{{expr.varRef.outName}}"
  falseLiteral: "false"
  trueLiteral: "true"
  elementAccess: "{{gen(expr.object)}}.get({{gen(expr.elementExpr)}})"
  thisReference: this
  conditional: "{{gen(expr.condition)}} ? {{gen(expr.whenTrue)}} : {{gen(expr.whenFalse)}}"
  break: break;
  templateString: |-
    {{for part in expr.parts|sep=" + " inline}}
      {{if part.literal|inline}}
        "{{escapeQuotes(part.text)}}"
      {{else}}
        {{genWithParen(part.expr)}}
      {{/if}}
    {{/for}}
  foreach: |-
    for ({{typeName(expr.itemVariable.type)}} {{expr.itemVariable.outName}} : {{gen(expr.items)}}) {
        {{genBody(expr.body)}}
    }
  for: |-
    for ({{genVar(expr.itemVariable)}}; {{gen(expr.condition)}}; {{gen(expr.incrementor)}}) {
        {{genBody(expr.body)}}
    }
  while: |-
    while ({{gen(expr.condition)}}) {
        {{genBody(expr.body)}}
    }
  if: |-
    if ({{gen(expr.condition)}}) {
        {{genBody(expr.then)}}
    }
    {{if expr.else|inline}}
      {{" "}}
      {{if isIfBlock(expr.else)|inline}}
        else {{genBody(expr.else)}}
      {{else}}
        else {
            {{genBody(expr.else)}}
        }
      {{/if}}
    {{/if}}
