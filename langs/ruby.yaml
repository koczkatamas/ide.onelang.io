extension: rb
casing: # based on https://github.com/bbatsov/ruby-style-guide
  class: pascal_case
  method: snake_case
  field: snake_case
  property: snake_case
  variable: snake_case
  enum: pascal_case
  enumMember: upper_case
classes:
  OneString:
    fields:
      length:
        template: "{{self}}.length"
    methods:
      substring:
        template: "{{self}}[{{start}}...{{end}}]"
      split:
        template: "{{self}}.split({{separator}})"
      get:
        template: "{{self}}[{{idx}}]"
      replace:
        template: "{{self}}.gsub(/#{Regexp.escape({{from}})}/, {{to}})"
      substrMatch:
        template: "{{self}}[{{offset}}...{{offset}} + {{str}}.length] == {{str}}"
  OneConsole:
    methods:
      print:
        template: "puts {{str}}"
  OneArray:
    fields:
      length:
        template: "{{self}}.length"
    methods:
      add:
        template: "{{self}} << {{genWithParen(item)}}"
      get:
        template: "{{self}}[{{index}}]"
      set:
        template: "{{self}}[{{index}}] = {{value}}"
  OneMap:
    methods:
      keys:
        template: "{{self}}.keys"
      values:
        template: "{{self}}.values"
      remove:
        template: "{{self}}.delete({{key}})"
      hasKey:
        template: "{{self}}.has_key?({{key}})"
      get:
        template: "{{self}}[{{key}}]"
      set:
        template: "{{self}}[{{key}}] = {{value}}"
  OneFile:
    methods:
      readText:
        template: "IO.read({{fn}})"
  OneError:
    methods:
      raise:
        template: raise {{message}}
  OneRegex:
    includes: ["one"]
    template: "One::Regex"
  OneReflect:
    includes: ["one"]
    template: "One::Reflect"
  OneBigInteger:
    methods:
      fromInt:
        template: "{{value}}"
  OneJson:
    methods:
      parse:
        includes: [json]
        template: "JSON.parse({{str}})"
  OneJValue:
    methods:
      isObject: "{{self}}.is_a?(Hash)"
      isArray: "{{self}}.is_a?(Array)"
      isString: "{{self}}.is_a?(String)"
      isNumber: "{{self}}.is_a?(Numeric)"
      isBool: "({{self}} == true or {{self}} == false)"
      isNull: "({{self}} == nil)"
      asString: "{{self}}"
      asNumber: "{{self}}"
      asBool: "{{self}}"
      asObject: "{{self}}"
      getArrayItems: "{{self}}"
  OneJObject:
    methods:
      getProperties: "{{self}}.keys"
      get: "{{self}}[{{name}}]"
  OneJProperty:
    methods:
      getName: "{{self}}"
      getValue: "{{obj}}[{{self}}]"        
  One:
    methods:
      langName: '"Ruby"'
operators:
  OneString + OneNumber:
    template: "{{gen(left)}} + {{genWithParen(right)}}.to_s"
  OneString + OneBoolean:
    template: "{{gen(left)}} + {{genWithParen(right)}}.to_s"
templates:
  testGenerator: |-
    begin
        {{class}}.new().{{method}}()
    rescue Exception => err
        print "Exception: #{err}"
    end

  main: |-
    {{for inc in includes|sep=\n}}
      require '{{inc.name}}'
    {{/for}}

    {{for enum in enums|sep=\n\n}}
      module {{enum.name}}
        {{for item in enum.values}}
          {{item.name}} = {{item.intValue}}
        {{/for}}
      end
    {{/for}}

    {{for class in classes|sep=\n\n}}
      class {{class.name}}{{if class.baseClass}} < {{class.baseClass}}{{/if}}
        {{for field in class.fields|sep=\n}}
          {{if field.static}}
            @{{field.name}} = {{if field.initializer}}{{gen(field.initializer)}}{{else}}nil{{/if}}
          {{else}}
            attr_accessor(:{{field.name}})
          {{/if}}
        {{/for}}

        {{if class.staticFields.length > 0}}
          class << self
            attr_accessor 
            {{for field in class.staticFields|inline sep=", "}}
              :{{field.name}}
            {{/for}}
          end
        {{/if}}

        {{if class.needsConstructor}}
          def initialize({{if class.constructor}}{{genArgs(class.constructor)}}{{/if}})
              {{for field in class.fields|sep=\n}}
                {{if field.static == false && field.initializer}}
                  @{{field.name}} = {{gen(field.initializer)}}
                {{/if}}
              {{/for}}

              {{if class.constructor}}
                {{genBody(class.constructor.body)}}
              {{/if}}
          end
        {{/if}}
  
        {{for method in class.methods|sep=\n\n}}
          {{if config.genMeta}}
            \# @signature {{method.name}}(
            {{for param in method.parameters|inline sep=", "}}
              {{param.name}}: {{if param.typeInfo}}{{param.typeInfo.oneName}}{{else}}???{{/if}}
            {{/for}}
            ): {{if method.returnTypeInfo}}{{method.returnTypeInfo.oneName}}{{else}}???{{/if}}
          {{/if}}
          def {{if method.static}}self.{{/if}}{{method.name}}({{genArgs(method)}})
              {{genBody(method.body)}}
          end
        {{/for}}
      end

      {{if class.attributes["reflect"]}}
        One::Reflect::setup_class(One::Class.new({{class.name}}, [
            {{for field in class.fields|sep=\n}}
              One::Field.new("{{field.name}}", {{field.static}}, "{{field.type}}"),
            {{/for}}
          ], [
            {{for method in class.methods|sep=\n}}
              One::Method.new("{{method.name}}", {{method.static}}, "{{method.returnType}}", [
                {{for param in method.parameters|sep=\n}}
                  One::MethodArgument.new("{{param.name}}", "{{param.type}}"),
                {{/for}}
              ]),
            {{/for}}
          ]));
      {{/if}}
    {{/for}}

    {{genBody(mainBlock)}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia2}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.name}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "{{itemVar.outName}} = {{gen(itemVar.initializer)}}"
  genWithParen:
    args: [{ name: expr }]
    template: |-
      {{if expr.exprKind == "Binary" or expr.exprKind == "Conditional"}}
        ({{gen(expr)}})
      {{else}}
        {{gen(expr)}}
      {{/if}}
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}.{{gen(expr.propertyName)}}"
  identifier: "{{expr.text}}"
  stringLiteral: '"{{expr.escapedText}}"'
  characterLiteral: '"{{expr.escapedText}}"'
  nullLiteral: "nil"
  return: "return{{if expr.expression}} {{gen(expr.expression)}}{{/if}}"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix++: "{{gen(expr.operand)}} += 1"
  postfix--: "{{gen(expr.operand)}} -= 1"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  throw: "raise {{gen(expr.expression)}};"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  variableDeclaration: "{{genVar(expr)}}"
  new: "{{gen(expr.cls)}}.new({{genParams(expr.arguments)}})"
  classReference: "{{clsName(expr.classRef)}}"
  enumReference: "{{expr.enumRef.outName}}"
  enumMemberReference: "{{expr.enumRef.outName}}::{{expr.enumMemberRef.outName}}"
  arrayLiteral: "[{{genParams(expr.items)}}]"
  mapLiteral: |- 
    {
      {{for prop in expr.properties|sep="\n"}}
        "{{prop.name}}" => {{gen(prop.initializer)}},
      {{/for}}
    }
  expressionStatement: "{{gen(expr.expression)}}"
  instanceMethod: "{{gen(expr.thisExpr)}}.{{expr.methodRef.outName}}"
  staticMethod: "{{clsName(expr.methodRef.classRef)}}.{{expr.methodRef.outName}}"
  localVar: "{{expr.varRef.outName}}"
  methodArgument: "{{expr.varRef.outName}}"
  instanceField: "{{gen(expr.thisExpr)}}.{{expr.varRef.outName}}"
  staticField: "{{gen(expr.thisExpr)}}.{{expr.varRef.outName}}"
  falseLiteral: "false"
  trueLiteral: "true"
  elementAccess: "{{gen(expr.object)}}[{{gen(expr.elementExpr)}}]"
  thisReference: self
  conditional: "{{gen(expr.condition)}} ? {{gen(expr.whenTrue)}} : {{gen(expr.whenFalse)}}"
  break: break
  templateString: |-
    "
    {{for part in expr.parts|inline}}
      {{if part.literal|inline}}
        {{escapeQuotes(part.text)}}
      {{else}}
        #{{{gen(part.expr)}}}
      {{/if}}
    {{/for}}
    "
  foreach: |-
    for {{expr.itemVariable.outName}} in {{gen(expr.items)}}
        {{genBody(expr.body)}}
    end
  for: |-
    {{genVar(expr.itemVariable)}}
    while {{gen(expr.condition)}}
        {{genBody(expr.body)}}
        {{gen(expr.incrementor)}}
    end
  while: |-
    while {{gen(expr.condition)}}
        {{genBody(expr.body)}}
    end
  if: |-
    if {{gen(expr.condition)}}
        {{genBody(expr.then)}}
    {{if expr.else}}
      {{if isIfBlock(expr.else)}}
        els{{genBody(expr.else)}}
      {{else}}
        else
            {{genBody(expr.else)}}
        end
      {{/if}}
    {{else}}
      end
    {{/if}}