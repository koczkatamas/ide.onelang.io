extension: swift
casing:
  class: pascal_case
  method: camel_case
  field: camel_case
  property: camel_case
  variable: camel_case
  enum: pascal_case
  enumMember: camel_case
primitiveTypes:
  void: Void
  any: Any
classes:
  OneString:
    type: String
    fields:
      length:
        template: "{{self}}.count"
    methods:
      substring:
        template: "String({{self}}[{{self}}.index({{self}}.startIndex, offsetBy: {{start}}) ..< {{self}}.index({{self}}.startIndex, offsetBy: {{end}})])"
      split:
        template: "{{self}}.split(separator: {{separator}}, omittingEmptySubsequences: false)"
      get:
        template: "String({{self}}[{{self}}.index({{self}}.startIndex, offsetBy: {{idx}})])"
      replace:
        includes: ["Foundation"]
        template: "{{self}}.replacingOccurrences(of: {{from}}, with: {{to}})"
      substrMatch:
        template: "String({{self}}[{{self}}.index({{self}}.startIndex, offsetBy: {{offset}}) ..< {{self}}.endIndex]).hasPrefix({{str}})"
  OneNumber:
    type: Int
  OneBoolean:
    type: Bool
  OneConsole:
    methods:
      print:
        template: "print({{str}})"
  OneArray:
    type: "[{{genType(typeArguments[0])}}]"
    fields:
      length:
        template: "{{self}}!.count"
    methods:
      add:
        mutates: true
        template: "{{self}}!.append({{item}})"
      get:
        template: "{{self}}![{{index}}]"
      set:
        template: "{{self}}![{{index}}] = {{value}}"
  OneMap:
    type: "[{{genType(typeArguments[0])}}: {{genType(typeArguments[1])}}]"
    methods:
      keys:
        template: "Array({{self}}!.keys)"
      values:
        template: "Array({{self}}!.values)"
      remove:
        mutates: true
        template: "{{self}}![{{key}}] = nil"
      hasKey:
        template: "{{self}}![{{key}}] != nil"
      get:
        template: "{{self}}![{{key}}]!"
      set:
        mutates: true
        template: "{{self}}![{{key}}] = {{value}}"
  OneFile:
    methods:
      readText:
        includes: [Foundation]
        template: "try! String(contentsOfFile: {{fn}}, encoding: String.Encoding.utf8)"
  OneError:
    methods:
      raise:
        throws: true
        template: throw OneError.RuntimeError({{message}})
templates:
  testGenerator: |-
    {{if methodInfo.throws}}
      do {
          try {{class}}().{{method}}()
      } catch OneError.RuntimeError(let message) {
          print("Exception: \(message)");
      }
    {{else}}
      {{class}}().{{method}}()
    {{/if}}
  main: |-
    {{for inc in includes|sep=\n}}
      import {{inc}}
    {{/for}}

    {{for enum in enums|sep=\n}}
      enum {{enum.name}} {
          case 
        {{for item in enum.values|inline sep=", "}}
          {{item.name}}
        {{/for}}
      }
    {{/for}}

    {{for interface in interfaces|sep=\n\n}}
      protocol {{genTypeArgs(interface)}} {
          {{for method in interface.methods|sep="\n    \n"}}
            func {{method.name}}({{genArgs(method)}}){{if method.throws}} throws{{/if}} -> {{genType(method.returnTypeInfo)}};
          {{/for}}
      }
    {{/for}}
    
    {{for class in classes|sep=\n\n}}
      class {{genTypeArgs(class)}} {
        {{for field in class.fields|sep=\n}}
          {{if field.static}}static {{/if}}var {{field.name}}: {{genType(field.typeInfo)}}{{if field.initializer}} = {{gen(field.initializer)}}{{/if}}
        {{/for}}

        {{if class.constructor}}
          init({{genArgs(class.constructor)}}){{if class.constructor.throws}} throws{{/if}} {
              {{genBody(class.constructor.body)}}
          }
        {{/if}}

        {{for method in class.methods|sep=\n\n}}
          {{if method.attributes["override"]}}override {{/if}}{{if method.static}}class {{/if}}func {{method.name}}({{genArgs(method)}}){{if method.throws}} throws{{/if}} -> {{genType(method.returnTypeInfo)}} {
              {{genBody(method.body)}}
          }
        {{/for}}
      }

      {{if class.reflect}}
        let _ = OneReflect.addClass(OneClass(name: "{{class.name}}"))
          {{for field in class.fields}}
            {{if field.static}}
              .addField(OneField("{{field.name}}", true, "{{field.type}}", { _ in {{class.name}}.{{field.name}} }, { {{class.name}}.{{field.name}} = $1 as! {{field.type}} }))
            {{else}}
              .addField(OneField("{{field.name}}", false, "{{field.type}}", { ($0 as! {{class.name}}).{{field.name}} }, { ($0 as! {{class.name}}).{{field.name}} = $1 as! {{field.type}} }))
            {{/if}}
          {{/for}}
          {{for method in class.methods}}
            .addMethod(OneMethod("{{method.name}}", {{if method.static}}true{{else}}false{{/if}}, "{{method.returnType}}", [
                {{for param in method.parameters}}
                  OneMethodArgument("{{param.name}}", "{{param.type}}"),
                {{/for}}
              ],
              { obj, args in 
                {{if method.static|inline}}
                  {{class.name}}
                {{else|inline}}
                  (obj as! {{class.name}})
                {{/if}}
              .{{method.name}}(
                {{for param in method.parameters|inline sep=,}}
                  {{param.name}}: args[{{param_idx}}] as! {{param.type}}
                {{/for}}
              ) }))
          {{/for}}
      {{/if}}
    {{/for}}

  genTypeArgs:
    args: [{name: class}]
    template: |-
      {{class.name}}
      {{if class.typeArguments|inline}}
        <
        {{for arg in class.typeArguments|inline sep=", "}}
          {{arg}}
        {{/for}}
        >
      {{/if}}
      {{if class.baseClasses.length > 0|inline}}
        : 
        {{for item in class.baseClasses|inline sep=", "}}
          {{item}}
        {{/for}}
      {{/if}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.name}}: {{genType(param.typeInfo)}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "{{if itemVar.isMutable}}var{{else}}let{{/if}} {{if itemVar.isUnused}}_{{else}}{{itemVar.outName}}{{/if}}{{if itemVar.type.canBeNull}}: {{genType(itemVar.type)}}{{/if}} = {{gen(itemVar.initializer)}}"
  genMethodArgs:
    args: 
      - name: methodArgs
    template: |-
      {{for arg in methodArgs|sep=", " inline}}
        {{arg.paramName}}: {{gen(arg)}}
      {{/for}}
  unwrap:
    args:
      - name: expr
    template: "{{gen(expr)}}{{if expr.valueType.canBeNull && expr.exprKind != 'ThisReference'}}!{{/if}}"
  genType:
    args:
      - name: type
    template: "{{typeName(type)}}{{if type.canBeNull}}?{{/if}}"
expressions:
  call: |-
    {{if expr.method.methodRef.throws}}try {{/if}}{{gen(expr.method)}}({{genMethodArgs(expr.arguments)}})
  stringLiteral: '"{{expr.escapedText}}"'
  characterLiteral: '"{{expr.escapedText}}"'
  return: "return{{if expr.expression}} {{gen(expr.expression)}}{{/if}}"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  postfix++: "{{gen(expr.operand)}} += 1"
  postfix--: "{{gen(expr.operand)}} -= 1"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  prefix!: "!({{gen(expr.operand)}})"
  throw: "throw {{gen(expr.expression)}};"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  nullLiteral: "nil"
  variableDeclaration: "{{genVar(expr)}}"
  new: "{{gen(expr.cls)}}({{genMethodArgs(expr.arguments)}})"
  classReference: "{{expr.classRef.outName}}"
  enumReference: "{{expr.enumRef.outName}}"
  enumMemberReference: "{{expr.enumRef.outName}}.{{expr.enumMemberRef.outName}}"
  arrayLiteral: |-
    {{if expr.items.length > 0}}
      [{{genParams(expr.items)}}]
    {{else}}
      [{{expr.typeArgs[0]}}]()
    {{/if}}
  mapLiteral: |- 
    [
      {{for prop in expr.properties|sep=",\n"}}
        "{{prop.name}}": {{gen(prop.initializer)}}
      {{/for}}
    ]
  expressionStatement: "{{if !expr.expression.valueType.isVoid and expr.expression.exprKind == 'Call'}}_ = {{/if}}{{gen(expr.expression)}}"
  instanceMethod: |-
    {{unwrap(expr.thisExpr)}}.{{expr.methodRef.outName}}
  staticMethod: "{{expr.methodRef.classRef.outName}}.{{expr.methodRef.outName}}"
  localVar: "{{expr.varRef.outName}}"
  methodArgument: "{{expr.varRef.outName}}"
  instanceField: |-
    {{unwrap(expr.thisExpr)}}.{{expr.varRef.outName}}
  staticField: |-
    {{gen(expr.thisExpr)}}.{{expr.varRef.outName}}
  falseLiteral: "false"
  trueLiteral: "true"
  elementAccess: "{{gen(expr.object)}}[{{gen(expr.elementExpr)}}]"
  thisReference: self
  conditional: "{{gen(expr.condition)}} ? {{gen(expr.whenTrue)}} : {{gen(expr.whenFalse)}}"
  break: break
  templateString: |-
    "
    {{for part in expr.parts|inline}}
      {{if part.literal|inline}}
        {{part.text}}
      {{else}}
        \({{unwrap(part.expr)}})
      {{/if}}
    {{/for}}
    "
  foreach: |-
    for {{expr.itemVariable.outName}} in {{unwrap(expr.items)}} {
        {{genBody(expr.body)}}
    }
  for: |-
    {{genVar(expr.itemVariable)}}
    while {{gen(expr.condition)}} {
        {{genBody(expr.body)}}
        {{gen(expr.incrementor)}}
    }
  while: |-
    while {{gen(expr.condition)}} {
        {{genBody(expr.body)}}
    }
  if: |-
    if {{gen(expr.condition)}} {
        {{genBody(expr.then)}}
    }
    {{if expr.else|inline}}
      {{" "}}
      {{if isIfBlock(expr.else)|inline}}
        else {{genBody(expr.else)}}
      {{else}}
        else {
            {{genBody(expr.else)}}
        }
      {{/if}}
    {{/if}}
