functions:
  OneConsole.print:
    template: 'print({{str}} . "\\n")'
  OneArray.add:
    template: "{{self}}[] = {{item}}"
  OneArray.length:
    template: "count({{self}})"
  OneArray.get:
    template: "{{self}}[{{index}}]"
  OneArray.set:
    template: "{{self}}[{{index}}] = {{value}}"
  OneMap.keys:
    template: "array_keys({{self}})"
  OneMap.values:
    template: "array_values({{self}})"
  OneMap.remove:
    template: "unset({{self}}[{{key}}])"
  OneMap.hasKey:
    template: "array_key_exists({{key}}, {{self}})"
  OneMap.get:
    template: "{{self}}[{{key}}]"
  OneMap.set:
    template: "{{self}}[{{key}}] = {{value}}"
extension: php
casing:
  class: pascal_case
  method: camel_case
templates:
  testGenerator: |-
    $c = new {{class}}();
    print($c->{{method}}() . "\\n");

  main: |-
    <?php

    {{for inc in includes|sep=\n}}
      require_once("{{inc}}");
    {{/for}}

    {{for class in classes|sep=\n\n}}
      class {{class.name}} {
          {{for field in class.fields|sep=\n}}
            {{field.visibility}} ${{field.name}};
          {{/for}}

          {{for method in class.methods|sep=\n\n}}
              function {{method.name}}({{genArgs(method)}}) {
                  {{genBody(method.body)}}
              }
          {{/for}}
      }
    {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        ${{param.name}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "${{itemVar.name}} = {{gen(itemVar.initializer)}}"
expressions:
  call: |-
    {{gen(expr.method)}}(
      {{for arg in expr.arguments|sep=", " inline}}
        {{gen(arg)}}
      {{/for}}
    )
  propertyAccess: "{{gen(expr.object)}}->{{gen(expr.propertyName)}}"
  identifier: "${{expr.text}}"
  stringLiteral: "\"{{expr.value}}\""
  nullLiteral: "NULL"
  return: "return {{gen(expr.expression)}};"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  variableDeclaration: "{{genVar(expr)}};"
  new: "new {{gen(expr.class)}}({{genParams(expr.arguments)}})"
  classReference: "{{expr.classRef.name}}"
  arrayLiteral: "array({{genParams(expr.items)}})"
  mapLiteral: |- 
    array(
      {{for prop in expr.properties|sep="\n"}}
        "{{prop.name}}" => {{gen(prop.initializer)}},
      {{/for}}
    )
  expressionStatement: "{{gen(expr.expression)}};"
  instanceMethod: "{{gen(expr.thisExpr)}}->{{expr.methodRef.name}}"
  staticMethod: "{{expr.methodRef.classRef.name}}::{{expr.methodRef.name}}"
  localVar: "${{expr.varRef.name}}"
  methodArgument: "${{expr.varRef.name}}"
  instanceField: "{{gen(expr.thisExpr)}}->{{expr.varRef.name}}"
  falseLiteral: "FALSE"
  trueLiteral: "TRUE"
  elementAccess: "{{gen(expr.object)}}[{{gen(expr.elementExpr)}}]"
  thisReference: "$this"
  foreach: |-
    foreach ({{gen(expr.items)}} as ${{expr.itemVariable.name}}) {
        {{genBody(expr.body)}}
    }
  for: |-
    for ({{genVar(expr.itemVariable)}}; {{gen(expr.condition)}}; {{gen(expr.incrementor)}}) {
        {{genBody(expr.body)}}
    }
  if: |-
    if ({{gen(expr.condition)}}) {
        {{genBody(expr.then)}}
    }
    {{if expr.else|inline}}
      {{if isIfBlock(expr.else)}}
        \ else {{genBody(expr.else)|inline}}
      {{else}}
        \ else {
            {{genBody(expr.else)}}
        }
      {{/if}}
    {{/if}}
